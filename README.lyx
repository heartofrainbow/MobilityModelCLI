#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass ctex-article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8-plain
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
节点移动模型仿真程序(C++语言版)使用说明
\end_layout

\begin_layout Section
基本情况
\end_layout

\begin_layout Standard
本节点移动模型仿真程序使用C++语言编写，现已实现仿真四种节点移动模型——随机走动(Random Walk)模型、随机路点(Random Waypoint)移动
模型、随机方向(Random Direction)移动模型、随机高斯-马尔科夫(Random Gauss-Markov)移动模型。
\end_layout

\begin_layout Section
程序文件结构
\end_layout

\begin_layout Description
main.cpp 主函数，用来调用mobilitymodel()函数;
\end_layout

\begin_layout Description
mobilitymodel.h 节点移动模型头文件
\end_layout

\begin_layout Description
mobilitymodel.cpp 节点移动模型函数,根据参数不同可以使用不同的模型。
\end_layout

\begin_layout Description
publicvar.h 公共变量
\end_layout

\begin_layout Description
node.h 节点类头文件
\end_layout

\begin_layout Description
node.cpp 节点类，四种模型的节点都继承于这个类，实现了一些最基本的操作
\end_layout

\begin_layout Description
random_walk_node.h 随机走动模型节点类头文件
\end_layout

\begin_layout Description
random_walk_node.cpp 随机走动模型节点类
\end_layout

\begin_layout Description
random_waypoint_node.h 随机路点移动模型节点类头文件
\end_layout

\begin_layout Description
random_waypoint_node.cpp 随机路点移动模型节点类
\end_layout

\begin_layout Description
random_direction_node.h 随机方向移动模型节点类头文件
\end_layout

\begin_layout Description
random_direction_node.cpp 随机方向移动模型节点类
\end_layout

\begin_layout Description
gauss_markov_node.h 随机高斯-马尔科夫移动模型节点类头文件
\end_layout

\begin_layout Description
gauss_markov_node.cpp 随机高斯-马尔科夫移动模型节点类
\end_layout

\begin_layout Description
glm OpenGL Mathematics(GLM)库，用到了它提供的vec3，即三维向量
\end_layout

\begin_layout Section
使用说明
\end_layout

\begin_layout Standard
使用方法主要就是调用mobilitymodel()函数，如同主函数中的例子所示。
\end_layout

\begin_layout Standard
在mobilitymodel.h中声明了三个重载函数，如下：
\end_layout

\begin_layout Itemize
void mobilitymodel(string str, int nodes, double xmin, double xmax, double
 ymin, double ymax, double zmin, double zmax, double vmin, double vmax,
 double m_interval=2.0, bool isGeo = true);
\end_layout

\begin_layout Itemize
void mobilitymodel(string str, int nodes, double xmin, double xmax, double
 ymin, double ymax, double zmin, double zmax, double vmin, double vmax,
 double m_vmean, double m_dmean, double m_pmean, double m_alpha, bool isGeo
 = true);
\end_layout

\begin_layout Itemize
void mobilitymodel(...);
\end_layout

\begin_layout Standard
第一个参数str用来指定选用的节点移动模型，有四种选项：
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
str
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
含义
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

rw
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
随机走动模型
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

rwp
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
随机路点移动模型
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

rd
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
随机方向移动模型
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

gm
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
随机高斯-马尔科夫移动模型
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
第二个参数nodes表示仿真节点的数目；
\end_layout

\begin_layout Standard
上述函数中，xmin, xmax, ymin, ymax, zmin, zmax, vmin, vmax均分别定义了仿真节点运动区域的位置范围和速度范围。
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
注意，当最后一个参数isGeo为真（默认就是真）时，表示前面输入的节点位置范围的参数均为经纬高坐标（这里使用的是WGS84坐标，如有需要可修改参数，在node:
:calc()函数中），则xmin, xmax, ymin, ymax, zmin, zmax分别表示经度的最小值和最大值、纬度的最小值和最大值、高度的最小值和
最大值。
\end_layout

\end_inset


\end_layout

\begin_layout Standard
m_interval在不同模型中有不同的含义，在随机走动模型中表示节点更新速度和方向的时间间隔，在随机方向移动模型中表示节点更新运动方向的时间间隔，在随机路点移
动模型中表示节点运动到目标地点后停留的时间，在高斯-马尔科夫模型则没有此参数。默认值为2.0秒。
\end_layout

\begin_layout Standard
m_vmean、m_dmean、m_pmean、m_alpha为随机高斯-马尔科夫移动模型的特有参数，分别表示速度均值、方位角均值、仰角均值和
\begin_inset Formula $\alpha$
\end_inset

。
\end_layout

\begin_layout Standard
最后一个重载函数相当于默认函数，当输入参数有误时会执行这一个函数，报错并退出。
\end_layout

\begin_layout Section
数据输出
\end_layout

\begin_layout Standard
程序主要维护以下两个数组（指针）变量：
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
extern glm::vec3* points; 	//存储笛卡尔坐标表示的所有节点位置
\end_layout

\begin_layout Plain Layout
extern glm::vec3* points_wgs84;	//存储WGS84坐标表示的所有节点位置
\end_layout

\end_inset


\end_layout

\begin_layout Standard
程序写成了多线程程序，每一个线程对应一个节点和一个编号，编号从0开始到n-1，n为节点数目。节点移动模型执行时会改变这两个数组中相应位置的数据，达到更新数据的目
的。这两个数组被声明在publicvar.h中，在mobilitymodel.cpp中被初始化，可以通过访问这两个数组来实时获取所有节点的位置信息。
\end_layout

\begin_layout Standard
另外为了编写时调试方便，在mobilitymodel中定义了一个额外的线程pointsDisplayer，用来每隔一秒输出编号为0的节点的位置信息。
\end_layout

\begin_layout Section
其他说明
\end_layout

\begin_layout Itemize
本程序编写时使用的是Linux，因此在代码开头中可以看到#include <unistd.h>，如果在Windows下编译，则需要替换为#include
 <windows.h>，请留意。
\end_layout

\begin_layout Itemize
程序中个别部分的代码使用了Lambda语句，因此最好在支持C++11以上的编译器中编译，否则还需要一些更改。
\end_layout

\begin_layout Itemize
为了使用三维向量vec3而使用了GLM库，这里简单介绍一下vec3的读取方法，下面的示例代码可以输出一个vec3三维向量的每一维数据：
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
glm::vec3 example;
\end_layout

\begin_layout Plain Layout
cout<<example.x<<endl;
\end_layout

\begin_layout Plain Layout
cout<<example.y<<endl;
\end_layout

\begin_layout Plain Layout
cout<<example.z<<endl;
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
GLM库的官方网站：https://glm.g-truc.net
\end_layout

\begin_layout Itemize
作者：武尚玮
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
quad
\end_layout

\end_inset

 微信：heartofrainbow
\end_layout

\end_body
\end_document
